name: Publish CSML Server Packages

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.11
      VCPKGRS_DYNAMIC: 1
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-latest]
        include:
          - os: ubuntu-18.04
            asset_name: csml-server-linux-amd64
          - os: macos-10.15
            asset_name: csml-server-macos-amd64
          - os: windows-latest
            asset_name: csml-server-windows-amd64

    steps:
    - uses: actions/checkout@v2

    # for some reason cache does not work properly with macos builds
    - name: Cache Cargo
      if: matrix.os != 'macos-10.15'
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-csml-cargo-${{ hashFiles('**/Cargo.lock') }}

    # Install Postgres for Linux, MacOs and Windows
    - name: Install postgres (Linux)
      if: runner.os == 'ubuntu-18.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev postgresql
        echo "host    all             all             127.0.0.1/32            md5" > sudo tee -a /etc/postgresql/10/main/pg_hba.conf
        sudo service postgresql restart && sleep 3
        sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
        sudo service postgresql restart && sleep 3
        echo "PG_DATABASE_URL=postgres://postgres:postgres@localhost/" >> $GITHUB_ENV
        echo "PG_EXAMPLE_DATABASE_URL=postgres://postgres:postgres@localhost/diesel_example" >> $GITHUB_ENV

    - name: Install postgres (MacOS)
      if: runner.os == 'macos-10.15'
      run: |
        /usr/local/opt/postgres/bin/pg_ctl -D /usr/local/var/postgres start
        sleep 3
        /usr/local/opt/postgres/bin/createuser -s postgres
        echo "PG_DATABASE_URL=postgres://postgres@localhost/" >> $GITHUB_ENV
        echo "PG_EXAMPLE_DATABASE_URL=postgres://postgres@localhost/diesel_example" >> $GITHUB_ENV

    - name: Install postgres (Windows)
      if: runner.os == 'windows-latest'
      shell: bash
      run: |
        choco install postgresql12 --force --params '/Password:root'
        echo "C:\Program Files\PostgreSQL\12\bin" >> $GITHUB_PATH
        echo "C:\Program Files\PostgreSQL\12\lib" >> $GITHUB_PATH
        echo "PQ_LIB_DIR=C:\Program Files\PostgreSQL\12\lib" >> $GITHUB_ENV
        echo "PG_DATABASE_URL=postgres://postgres:root@localhost/" >> $GITHUB_ENV

    - name: Install Rust Stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build Server
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --manifest-path=csml_server/Cargo.toml --features csml_engine/mongo,csml_engine/dynamo,csml_engine/postgresql  --release

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.asset_name }}
        path: target/release/csml_server




  publish-binaries:
    runs-on: ${{ matrix.os }}
    needs: build
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.11
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-10.15]
        include:
          - os: ubuntu-18.04
            asset_name: csml-server-linux-amd64
          - os: macos-10.15
            asset_name: csml-server-macos-amd64

    steps:
      - run: mkdir -p target/release
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.asset_name }}
          path: target/release

      - name: Upload binary to release
        uses: svenstaro/upload-release-action@2.2.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/csml_server
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
          overwrite: true



  publish-docker:
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - uses: actions/checkout@v2
      - run: mkdir -p target/release
      - uses: actions/download-artifact@v2
        with:
          name: csml-server-linux-amd64
          path: target/release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # using ${{ github.ref }} returns /refs/tags/TAGNAME instead of just TAGNAME
      - name: Get release version
        id: release_version
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            clevy/csml-engine:latest
            clevy/csml-engine:${{ steps.release_version.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
