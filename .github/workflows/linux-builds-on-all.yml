name: linux-build

on:
  pull_request:
    branches: [ master, dev ]
  # release:
  #   types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        include:
          - os: ubuntu-18.04
            amd_asset_name: csml-server-linux-amd64
            arm_asset_name: csml-server-linux-armv7

    steps:
    - uses: actions/checkout@v2

    - name: Cache Cargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-csml-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install postgres (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev postgresql
        echo "host    all             all             127.0.0.1/32            md5" > sudo tee -a /etc/postgresql/10/main/pg_hba.conf
        sudo service postgresql restart && sleep 3
        sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
        sudo service postgresql restart && sleep 3

    - name: Install Rust Stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: (AMD) Build Server
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --manifest-path=csml_server/Cargo.toml --features csml_engine/mongo,csml_engine/dynamo,csml_engine/postgresql  --release

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.amd_asset_name }}
        path: target/release/csml_server


    - name: (ARM) Build Server
      uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --manifest-path=csml_server/Cargo.toml --features csml_engine/mongo,csml_engine/dynamo --target aarch64-unknown-linux-gnu --release

    - uses: actions/upload-artifact@v2
      with:
        name:  ${{ matrix.arm_asset_name }}
        path: target/aarch64-unknown-linux-gnu/release/csml_server





  # publish-binaries:
  #   runs-on: ${{ matrix.os }}
  #   needs: build
  #   strategy:
  #     matrix:
  #       os: [ubuntu-18.04]
  #       include:
  #         - os: ubuntu-18.04
  #           amd_asset_name: csml-server-linux-amd64
  #           arm_asset_name: csml-server-linux-armv7

  #   steps:
  #     - run: mkdir -p target/release
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ matrix.amd_asset_name }}
  #         path: target/release

  #     - name: Upload linux AMD binary to release
  #       uses: svenstaro/upload-release-action@2.2.0
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: target/release/csml_server
  #         asset_name: ${{ matrix.asset_name }}
  #         tag: ${{ github.ref }}
  #         overwrite: true

  #     - run: mkdir -p target/aarch64-unknown-linux-gnu/release
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ${{ matrix.arm_asset_name }}
  #         path: target/aarch64-unknown-linux-gnu/release

  #     - name: Upload linux ARM binary to release
  #       uses: svenstaro/upload-release-action@2.2.0
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: target/aarch64-unknown-linux-gnu/release/csml_server
  #         asset_name: ${{ matrix.asset_name }}
  #         tag: ${{ github.ref }}
  #         overwrite: true


  publish-docker:
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - uses: actions/checkout@v2
      - run: mkdir -p target/release
      - uses: actions/download-artifact@v2
        with:
          name: csml-server-linux-amd64
          path: target/release

      - run: mkdir -p target/aarch64-unknown-linux-gnu/release
      - uses: actions/download-artifact@v2
        with:
          name: csml-server-linux-armv7
          path: target/aarch64-unknown-linux-gnu/release

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.TMP_DOCKERHUB_USERNAME }}
          password: ${{ secrets.TMP_DOCKERHUB_TOKEN }}

      # using ${{ github.ref }} returns /refs/tags/TAGNAME instead of just TAGNAME
      - name: Get release version
        id: release_version
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            clevy/csml-engine:latest
            clevy/csml-engine:${{ steps.release_version.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
