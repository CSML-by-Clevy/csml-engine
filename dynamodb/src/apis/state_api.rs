/*
 * CSML engine microservices
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct StateApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl StateApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> StateApiClient {
        StateApiClient {
            configuration,
        }
    }
}

pub trait StateApi {
    fn delete_state_full(&self, bot_id: &str, user_id: &str, channel_id: &str) -> Result<(), Error>;
    fn delete_state_key(&self, _type: &str, key: &str, bot_id: &str, user_id: &str, channel_id: &str) -> Result<(), Error>;
    fn delete_state_type(&self, _type: &str, bot_id: &str, user_id: &str, channel_id: &str) -> Result<(), Error>;
    fn get_state_full(&self, bot_id: &str, user_id: &str, channel_id: &str) -> Result<Vec<crate::models::StateModel>, Error>;
    fn get_state_key(&self, _type: &str, key: &str, bot_id: &str, user_id: &str, channel_id: &str) -> Result<crate::models::StateModel, Error>;
    fn get_state_type(&self, _type: &str, bot_id: &str, user_id: &str, channel_id: &str) -> Result<Vec<crate::models::StateModel>, Error>;
    fn set_state_items(&self, bot_id: &str, user_id: &str, channel_id: &str, create_state_body: Vec<crate::models::CreateStateBody>) -> Result<(), Error>;
}

impl StateApi for StateApiClient {
    fn delete_state_full(&self, bot_id: &str, user_id: &str, channel_id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/state", configuration.base_path);
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_state_key(&self, _type: &str, key: &str, bot_id: &str, user_id: &str, channel_id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/state/{type}/{key}", configuration.base_path, type=crate::apis::urlencode(_type), key=crate::apis::urlencode(key));
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn delete_state_type(&self, _type: &str, bot_id: &str, user_id: &str, channel_id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/state/{type}", configuration.base_path, type=crate::apis::urlencode(_type));
        let mut req_builder = client.delete(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_state_full(&self, bot_id: &str, user_id: &str, channel_id: &str) -> Result<Vec<crate::models::StateModel>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/state", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_state_key(&self, _type: &str, key: &str, bot_id: &str, user_id: &str, channel_id: &str) -> Result<crate::models::StateModel, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/state/{type}/{key}", configuration.base_path, type=crate::apis::urlencode(_type), key=crate::apis::urlencode(key));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_state_type(&self, _type: &str, bot_id: &str, user_id: &str, channel_id: &str) -> Result<Vec<crate::models::StateModel>, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/state/{type}", configuration.base_path, type=crate::apis::urlencode(_type));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn set_state_items(&self, bot_id: &str, user_id: &str, channel_id: &str, create_state_body: Vec<crate::models::CreateStateBody>) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/state", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&create_state_body);

        // send request
        let req = req_builder.build()?;
        
        client.execute(req)?.error_for_status()?;
        Ok(())
    }

}
