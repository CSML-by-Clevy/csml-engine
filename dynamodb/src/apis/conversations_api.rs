/*
 * CSML engine microservices
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct ConversationsApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl ConversationsApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> ConversationsApiClient {
        ConversationsApiClient {
            configuration,
        }
    }
}

pub trait ConversationsApi {
    fn close_all_conversations(&self, bot_id: &str, user_id: &str, channel_id: &str, inline_object: crate::models::InlineObject) -> Result<(), Error>;
    fn close_conversation(&self, conversation_id: &str, bot_id: &str, user_id: &str, channel_id: &str, inline_object1: crate::models::InlineObject1) -> Result<(), Error>;
    fn create_conversation(&self, bot_id: &str, user_id: &str, channel_id: &str, create_conversation_body: crate::models::CreateConversationBody) -> Result<crate::models::ConversationModel, Error>;
    fn get_conversation(&self, conversation_id: &str, bot_id: &str, user_id: &str, channel_id: &str) -> Result<crate::models::ConversationModel, Error>;
    fn get_latest_open(&self, bot_id: &str, user_id: &str, channel_id: &str) -> Result<crate::models::InlineResponse200, Error>;
    fn update_conversation(&self, conversation_id: &str, bot_id: &str, user_id: &str, channel_id: &str, update_conversation_body: crate::models::UpdateConversationBody) -> Result<(), Error>;
}

impl ConversationsApi for ConversationsApiClient {
    fn close_all_conversations(&self, bot_id: &str, user_id: &str, channel_id: &str, inline_object: crate::models::InlineObject) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/conversations/close", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&inline_object);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn close_conversation(&self, conversation_id: &str, bot_id: &str, user_id: &str, channel_id: &str, inline_object1: crate::models::InlineObject1) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/conversations/{conversationId}/close", configuration.base_path, conversationId=crate::apis::urlencode(conversation_id));
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&inline_object1);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn create_conversation(&self, bot_id: &str, user_id: &str, channel_id: &str, create_conversation_body: crate::models::CreateConversationBody) -> Result<crate::models::ConversationModel, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/conversations", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&create_conversation_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_conversation(&self, conversation_id: &str, bot_id: &str, user_id: &str, channel_id: &str) -> Result<crate::models::ConversationModel, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/conversations/{conversationId}", configuration.base_path, conversationId=crate::apis::urlencode(conversation_id));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_latest_open(&self, bot_id: &str, user_id: &str, channel_id: &str) -> Result<crate::models::InlineResponse200, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/conversations/latest", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_conversation(&self, conversation_id: &str, bot_id: &str, user_id: &str, channel_id: &str, update_conversation_body: crate::models::UpdateConversationBody) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/conversations/{conversationId}", configuration.base_path, conversationId=crate::apis::urlencode(conversation_id));
        let mut req_builder = client.put(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&update_conversation_body);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

}
