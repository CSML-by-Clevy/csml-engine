/*
 * CSML engine microservices
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct InteractionsApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl InteractionsApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> InteractionsApiClient {
        InteractionsApiClient { configuration }
    }
}

pub trait InteractionsApi {
    fn get_interaction(
        &self,
        interaction_id: &str,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
    ) -> Result<crate::models::InteractionModel, Error>;
    fn get_interaction_status(
        &self,
        interaction_id: &str,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
    ) -> Result<crate::models::InlineResponse2001, Error>;
    fn get_lock_status(
        &self,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
    ) -> Result<crate::models::InlineResponse2002, Error>;
    fn init_interaction(
        &self,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
        create_interaction_body: crate::models::CreateInteractionBody,
    ) -> Result<crate::models::InteractionModel, Error>;
    fn update_interaction(
        &self,
        interaction_id: &str,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
        inline_object2: crate::models::InlineObject2,
    ) -> Result<(), Error>;
}

impl InteractionsApi for InteractionsApiClient {
    fn get_interaction(
        &self,
        interaction_id: &str,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
    ) -> Result<crate::models::InteractionModel, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/interactions/{interactionId}",
            configuration.base_path,
            interactionId = crate::apis::urlencode(interaction_id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_interaction_status(
        &self,
        interaction_id: &str,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
    ) -> Result<crate::models::InlineResponse2001, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/interactions/{interactionId}/status",
            configuration.base_path,
            interactionId = crate::apis::urlencode(interaction_id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_lock_status(
        &self,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
    ) -> Result<crate::models::InlineResponse2002, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/interactions/lock", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn init_interaction(
        &self,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
        create_interaction_body: crate::models::CreateInteractionBody,
    ) -> Result<crate::models::InteractionModel, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/interactions", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&create_interaction_body);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn update_interaction(
        &self,
        interaction_id: &str,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
        inline_object2: crate::models::InlineObject2,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/interactions/{interactionId}",
            configuration.base_path,
            interactionId = crate::apis::urlencode(interaction_id)
        );
        let mut req_builder = client.put(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&inline_object2);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }
}
