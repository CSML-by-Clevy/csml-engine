/*
 * CSML engine microservices
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::rc::Rc;

use reqwest;

use super::{configuration, Error};

pub struct MessagesApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl MessagesApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> MessagesApiClient {
        MessagesApiClient { configuration }
    }
}

pub trait MessagesApi {
    fn add_message(
        &self,
        conversation_id: &str,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
        create_message_body: crate::models::CreateMessageBody,
    ) -> Result<(), Error>;
    fn add_messages_bulk(
        &self,
        conversation_id: &str,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
        create_message_body: Vec<crate::models::CreateMessageBody>,
    ) -> Result<(), Error>;
}

impl MessagesApi for MessagesApiClient {
    fn add_message(
        &self,
        conversation_id: &str,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
        create_message_body: crate::models::CreateMessageBody,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/conversations/{conversationId}/messages",
            configuration.base_path,
            conversationId = crate::apis::urlencode(conversation_id)
        );
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&create_message_body);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn add_messages_bulk(
        &self,
        conversation_id: &str,
        bot_id: &str,
        user_id: &str,
        channel_id: &str,
        create_message_body: Vec<crate::models::CreateMessageBody>,
    ) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!(
            "{}/conversations/{conversationId}/messages/bulk",
            configuration.base_path,
            conversationId = crate::apis::urlencode(conversation_id)
        );
        let mut req_builder = client.post(uri_str.as_str());

        req_builder = req_builder.query(&[("bot_id", &bot_id.to_string())]);
        req_builder = req_builder.query(&[("user_id", &user_id.to_string())]);
        req_builder = req_builder.query(&[("channel_id", &channel_id.to_string())]);
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        req_builder = req_builder.json(&create_message_body);

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }
}
